#!/usr/bin/python
#
# System boot script
# Copyright 2004 Forty-two <http://forty-two.berlios.de>
# Released under a BSD license
#

#
# Version 0.12b - Boots and should look nice
# Last change: Made it look pretty
#

# Variables needed from /etc/initconf.py:
# timezone
# hostname
# font (console font)
# keymap
# modules (_ARRAY_ of modules)
#

# Load the system module
from os import system

# Load the path module
from os import path

# Load the exit module
from sys import exit

# Load variables from initconf.py
import initconf

# Print ".:: Forty-two is booting the system ::."
print "\x1b[1;37m.::\x1b[0m \x1b[1;34mForty-two is booting the system\x1b[0m \x1b[1;37m::.\x1b[0m"
print "\n"

# Start devfsd below
# I would have started pts, but I don't know what daemon to start...
# We will use PTS eventually.

print "\x1b[1;37m>>\x1b[0m Starting Devfsd:"
system( "/sbin/devfsd /dev" )
print "\x1b[1;32mDONE\x1b[0m\n" # DONE in green

# Activate swap partition

print "\x1b[1;37m>>\x1b[0m Activating swap:"
system( "/sbin/swapon -a" )
print "\x1b[1;32mDONE\x1b[0m\n"

# Mount root (/) read-only
system( "/bin/mount -n -o remount,ro /" )

# Check filesystems for errors
# This can be commented out to improve boot time
print "\x1b[1;37m>>\x1b[0m Checking filesystem for errors:"
system( "/sbin/fsck -A -T -C -a" )
tmp = system( "/bin/echo $?" ) # The shell variable $?
if tmp > 1: # If the filesystem is bad
	print "************ ERROR: FILESYSTEM CHECK FAILED *************\n"
	print "**                                                     **\n"
	print "** You will now enter a shell to repair this manually. **\n"
	print "** You will then be rebooted.                          **\n"
	print "*********************************************************\n"
	# Give them a shell then reboot the system
	system( "/sbin/sulogin -p" )
	system( "/bin/umount -a" )
	system( "/bin/mount -n -o remount,ro /" )
	system( "/sbin/reboot -f" )
	exit() # Kill the script
print "\x1b[1;32mDONE\x1b[0m\n"

# Mount filesystems
print "\x1b[1;37m>>\x1b[0m Mounting filesystems:"
system( "/bin/mount -n -o remount,rw /" )
system( "/bin/rm -f /etc/mtab*" )
system( "/bin/mount -a -O no_netdev" )
print "\x1b[1;32mDONE\x1b[0m\n"

# Clean up miscellaneous files
system( "/var/run/utmp" )
system( "/bin/rm -rf /forcefsck /fastboot /etc/nologin /etc/shutdownpid /var/run/*.pid /var/lock/* /tmp/* &> /dev/null" )

# Set kernel variables
system( "/sbin/sysctl -p > /dev/null" )

# Update shared library links
system( "/sbin/ldconfig" )

# Configure hostname
if initconf.hostname != "":
	print "\x1b[1;37m>>\x1b[0m Setting hostname to",initconf.hostname+":"
	#Set the hostname
	tmp = "/bin/hostname "+initconf.hostname
	system( tmp )
	print "\x1b[1;32mDONE\x1b[0m\n"

# Load random seed
# Returns true if /var/tmp/random-seed exists
tmp = path.exists( "/var/tmp/random-seed" )
if tmp:
	system( "/bin/cat /var/tmp/random-seed > /dev/urandom" )

# Set the clock
print "\x1b[1;37m>>\x1b[0m Setting hardware clock:"
tmp = path.exists( "/etc/adjtime" )
if tmp == False:
	system( "/bin/echo \"0.0 0 0.0\" > /etc/adjtime" )

# And set the timezone ;)
if initconf.timezone != "":
	tmp = "/bin/ln -sf /usr/share/zoneinfo/" + initconf.timezone
	system( tmp )

system( "/sbin/hwclock --hctosys" )
print "\x1b[1;32mDONE\x1b[0m"

# Load console font (OPTIONAL)
if initconf.font != "":
	print "\x1b[1;37m>>\x1b[0mSetting console font to",initconf.font+":"
	tmp = "/usr/bin/setfont "+initconf.font
	system( tmp )
	print "\x1b[1;32mDONE\x1b[0m"

if initconf.keymap != "":
	print "\x1b[1;37m>>\x1b[0m Setting keymap to",initconf.keymap+":"
	tmp = "/bin/loadkeys -q "+initconf.keymap
	system( tmp )
	print "\x1b[1;32mDONE\x1b[0m\n"

# After 15 minutes idle, blank the screen
system( "/usr/bin/setterm -blank 15" )

# Load modules
if initconf.modules[0] != "":
	print "\x1b[1;37m>>\x1b[0m Loading modules:"
	for module in initconf.modules:
		print "\x1b[1;36m>>>\x1b[0m Loading module ",module
		tmp = "/sbin/modprobe "+module
		system( tmp )
	print "\x1b[1;32mDONE\x1b[0m\n"

# End of script
#