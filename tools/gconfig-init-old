#!/usr/bin/env python
#
# GTK+ >= 2.0 configuration utility for Forty-two (init scripts)
#

import pygtk
pygtk.require( "2.0" )
import gtk

# Define global variables
TIMEZONE = ""
FONT = ""
KEYMAP = ""
MODULES = [ "" ]
BACKUP = ""
BACKUPS = [ "" ]
DAEMONS = [ "" ]
HOSTNAME = [ "" ]
INTERFACES = { "":"" }

class MainWindow:
	def delete_event( self, widget, event, data=None ):
		gtk.main_quit()
		return gtk.FALSE

	def close_help( self, widget, data=None ):
		if data == "help":
			self.window2.destroy()

		elif data == "filesel":
			self.filesel1.destroy()

	def help_click( self, widget, data="1" ):

		# Create the help window
		self.window2 = gtk.Window()
		self.window2.set_title( "gConfig-Init - Help" )
		self.window2.connect( "delete_event", self.close_help )
		self.window2.set_border_width( 10 )

		# Create a table to store it
		self.help_table = gtk.Table( 4, 3, gtk.FALSE )
		self.help_table.set_row_spacings( 10 )
		self.help_table.set_col_spacings( 5 )
		self.window2.add( self.help_table )

		# Create info for it
		if data == "1":

			# Create Timezone help info
			self.help_label1 = gtk.Label( "Timezone: Set this to your local timezone. Timezone's can be found in /usr/share/zoneinfo." )
			self.help_label1.set_line_wrap( gtk.TRUE )
			self.help_label1.set_justify( gtk.JUSTIFY_LEFT )
			self.help_table.attach( self.help_label1, 0, 3, 0, 1 )
			self.help_label1.show()
			
			# Create Font help info
			self.help_label2 = gtk.Label( "Font: If you require a special console font (you are non-English), enter it here. Console fonts can be found in /usr/lib/kbd." )
			self.help_label2.set_line_wrap( gtk.TRUE )
			self.help_label2.set_justify( gtk.JUSTIFY_LEFT )
			self.help_table.attach( self.help_label2, 0, 3, 1, 2 )
			self.help_label2.show()
			
			# Create Keymap help info
			self.help_label3 = gtk.Label( "Keymap: If you require a special keymap (non-US or Dvorak), input it here. Keymaps can be found in /usr/lib/kbd." )
			self.help_label3.set_line_wrap( gtk.TRUE )
			self.help_label3.set_justify( gtk.JUSTIFY_LEFT )
			self.help_table.attach( self.help_label3, 0, 3, 2, 3 )
			self.help_label3.show()
			
		# Set 'Close' button
		self.close_button.connect( "clicked", self.close_help, "help" )
		self.help_table.attach( self.close_button, 1, 2, 3, 4 )
		self.close_button.show()

		# Show everything
		self.help_table.show()
		self.window2.show()
			

	def forward_clicked( self, widget, data=None ):
		if data == "part 1":
			self.part1()
		
		if data == "part 2":
			self.part2()

	def open_file_ok( self, widget, data="timezone" ):

		# Set 'filename' to the file they have selected
		self.filename = self.filesel1.get_filename()
		
		if data == "timezone":
			self.text1.set_text( self.filename )

		elif data == "font":
			self.text2.set_text( self.filename )

		elif data == "keymap":
			self.text3.set_text( self.filename )

		self.close_help( self.filesel1.ok_button, "filesel" )
	
	def file_open( self, widget, data="Timezone" ):
		
		# Create the fileselection box
		self.filesel1 = gtk.FileSelection( data )
		self.filesel1.hide_fileop_buttons()

		if( data == "Timezone" ):
			self.filesel1.set_filename( "/usr/share/zoneinfo/" )
			self.filesel1.ok_button.connect( "clicked", self.open_file_ok, "timezone" )
			
		elif( data == "Font" ):
			self.filesel1.set_filename( "/usr/share/kbd/consolefonts/" )
			self.filesel1.ok_button.connect( "clicked", self.open_file_ok, "font" )
		
		elif( data == "Keymap" ):
			self.filesel1.set_filename( "/usr/share/kbd/keymaps/" )
			self.filesel1.ok_button.connect( "clicked", self.open_file_ok, "keymap" )

		
		# Show/hide everything
		self.filesel1.cancel_button.hide()
		self.filesel1.show()

	def part2( self ):
		self.window1.hide()
		print "Hid window"

		# Get the stuff
		TIMEZONE = self.text1.get_text()
		FONT = self.text2.get_text()
		KEYMAP = self.text2.get_text()
		print "set variables"
		print self.text1.get_text()

	def part1( self ):
		self.window1.hide()
		self.window1.set_default_size( 371, 203 )
		
		# Remove unnecessary items from table
		self.main_table.remove( self.gimage )

		# Make labels 2 and 3
		self.label2 = gtk.Label( "Timezone:" )
		self.label3 = gtk.Label( "Keymap:" )

		# Make text entry boxes
		self.text1 = gtk.Entry( 0 )
		self.text2 = gtk.Entry( 0 )
		self.text3 = gtk.Entry( 0 )

		# Make 'Open' buttons
		self.obutton1 = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.obutton1.connect( "clicked", self.file_open, "Timezone" )
		self.obutton2 = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.obutton2.connect( "clicked", self.file_open, "Font" )
		self.obutton3 = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.obutton3.connect( "clicked", self.file_open, "Keymap" )
		
		# Set label 1
		self.label1.set_text( "Font:" )

		# When 'Forward' or 'Help' are clicked...
		self.forward_button.connect( "clicked", self.forward_clicked, "part 2" )
		self.help_button.connect( "clicked", self.help_click, "1" )

		# Add the new stuff to table
		self.main_table.remove( self.label1 )
		self.main_table.remove( self.quit_button)
		self.main_table.attach( self.label2, 0, 1, 0, 1 )
		self.main_table.attach( self.text1, 1, 3, 0, 1 )
		self.main_table.attach( self.obutton1, 3, 4, 0, 1 )
		self.main_table.attach( self.label1, 0, 1, 1, 2 )
		self.main_table.attach( self.text2, 1, 3, 1, 2 )
		self.main_table.attach( self.obutton2, 3, 4, 1, 2 )
		self.main_table.attach( self.label3, 0, 1, 2, 3 )
		self.main_table.attach( self.text3, 1, 3, 2, 3 )
		self.main_table.attach( self.obutton3, 3, 4, 2, 3 )
		self.main_table.attach( self.help_button, 1, 2, 3, 4 )
		self.main_table.attach( self.quit_button, 0, 1, 3, 4 )
		
		# Show everything
		self.label2.show()
		self.text1.show()
		self.text2.show()
		self.label3.show()
		self.text3.show()
		self.help_button.show()
		self.obutton1.show()
		self.obutton2.show()
		self.obutton3.show()
		self.window1.show()
		

	def __init__( self ):

		# Start the window
		self.window1 = gtk.Window( gtk.WINDOW_TOPLEVEL )
		self.window1.set_title( "gConfig-Init" )
		self.window1.connect( "delete_event", self.delete_event )
		self.window1.set_border_width( 20 )

		# Make the table
		self.main_table = gtk.Table( 4, 4, gtk.FALSE )
		self.window1.add( self.main_table )

		# Load the image
		self.gimage = gtk.Image()
		self.gimage.set_from_file( "/home/kyle/devel/pynux/forty-two/tools/imgs/gconfig-init.png" )
		
		# Make a label for the middle of the table
		self.label1 = gtk.Label( "Welcome to gConfig-Init. This tool will help you configure your init scripts - telling your system what to load at boot. You may click 'Quit' to exit this program. No changes to your system will be made without prompting you. Hit 'Forward' to continue." )
		self.label1.set_line_wrap( gtk.TRUE )
		self.main_table.set_row_spacings( 5 )
		self.main_table.set_col_spacings( 5 )

		# Make a 'Forward' button
		self.forward_button = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.forward_button.connect( "clicked", self.forward_clicked, "part 1" )

		# Make a 'Cancel' button
		self.cancel_button = gtk.Button( "Cancel", gtk.STOCK_CANCEL )

		# Make a 'Quit' button
		self.quit_button = gtk.Button( "Quit", gtk.STOCK_QUIT )
		self.quit_button.connect( "clicked", lambda w: gtk.main_quit() )

		# Make a 'Help' button
		self.help_button = gtk.Button( "Help", gtk.STOCK_HELP )

		# Make a 'Close' button
		self.close_button = gtk.Button( "Close", gtk.STOCK_CLOSE )

		# Attach everything to the table
		self.main_table.attach( self.gimage, 0, 4, 0, 1 )
		self.main_table.attach( self.label1, 1, 3, 1, 2 )
		self.main_table.attach( self.forward_button, 3, 4, 3, 4 )
		self.main_table.attach( self.quit_button, 1, 2, 3, 4 )
		
		# Show everything
		self.gimage.show()
		self.label1.show()
		self.forward_button.show()
		self.quit_button.show()
		self.main_table.show()
		self.window1.show()

def main():
	gtk.main()
	return 0

if __name__ == "__main__":
	MainWindow()
	main()
