#!/usr/bin/env python
#
# GTK+ >= 2.0 configuration utility for Forty-two (init scripts)
#
# REMEMBER: DO A SEARCH FOR CHANGEMEs

import pygtk
pygtk.require( "2.0" )
import gtk
from os import path,system

class MainWindow:
	
	# Called when window is closed
	def delete_event( self, widget, event, data=None ):
		gtk.main_quit()
		return gtk.FALSE

	# Used to destroy child windows
	def second_destroy( self, widget, data ):
		if data == "Help":
			self.help_window.destroy()
		elif data == "filesel1":
			self.filesel1.destroy()

	def help( self, widget, data="Begin" ):
		
		# Create the help window
		self.help_window = gtk.Window( gtk.WINDOW_TOPLEVEL )
		self.help_window.set_title( "Help" )
		self.help_window.set_border_width( 5 )
		self.help_window.connect( "delete_event", self.second_destroy, "Help" )
		
		# Create vbox to hold the contents
		self.help_vbox = gtk.VBox( gtk.FALSE, 5 )
		self.help_window.add( self.help_vbox )
		
		if data == "Begin":
			self.help_para1 = gtk.Label( "You can either click 'Forward' to continue, click on one of the tabs to skip to that particular step, or click cancel to quit the program (no changes will be made to your system if you do this)." )
			self.help_para1.set_line_wrap( gtk.TRUE )
			self.help_vbox.pack_start( self.help_para1, gtk.TRUE, gtk.TRUE, 5 )
			self.help_para1.show()

		elif data == "Basic Settings":
			self.help_para1 = gtk.Label( "Put your timezone here. If you require a special keymap or font you may optionally put it here - if you don't, just leave them blank. Hitting 'Open' will display a list of all fonts, keymaps, or timezones." )
			self.help_para1.set_line_wrap( gtk.TRUE )
			self.help_vbox.pack_start( self.help_para1, gtk.TRUE, gtk.TRUE, 5 )
			self.help_para1.show()
		elif data == "Kernel Modules":
			self.help_para1 = gtk.Label( "Set kernel modules to be loaded on boot here. To add a module, put it's name in the text entry box beside 'Add Module:' and click 'Add.' To remove a module you have added, select it from the drop-down list and click 'Remove.'" )
			self.help_para1.set_line_wrap( gtk.TRUE )
			self.help_vbox.pack_start( self.help_para1, gtk.TRUE, gtk.TRUE, 5 )
			self.help_para1.show()
		elif data == "Backups":
			self.help_para1 = gtk.Label( "The init scripts support optionally backing up select files on boot. To disable this, select 'No.' You can then hit forward, or click on one of the above tabs to skip to that particular section." )
			self.help_para1.set_line_wrap( gtk.TRUE )
			self.help_para2 = gtk.Label( "To enable this, select 'Yes.' You can add files to be backed up by hitting 'Open', selecting them, then hitting 'Add,' or by typing their name in and hitting 'Add.' To remove a file from being backed up, select it from the drop-down list and click 'Remove.'" )
			self.help_para2.set_line_wrap( gtk.TRUE )
			self.help_vbox.pack_start( self.help_para1, gtk.TRUE, gtk.TRUE, 5 )
			self.help_vbox.pack_start( self.help_para2, gtk.TRUE, gtk.TRUE, 5 )
			self.help_para1.show()
			self.help_para2.show()
		elif data == "Services":
			self.help_para1 = gtk.Label( "Set services to be started on boot here. This version of the init scripts supports loading services parallely - however, this feature is not yet thoroughly tested and should be avoided unless you know what you're doing. To enable parallel service loading, select 'Yes.'" )
			self.help_para1.set_line_wrap( gtk.TRUE )
			self.help_para2 = gtk.Label( "To add a service, type it's name in the 'Add service:' box and then click 'Add.' If you decide you don't want that service, you can select it from the drop-down list and click 'Remove' to remove it." )
			self.help_para2.set_line_wrap( gtk.TRUE )
			self.help_vbox.pack_start( self.help_para1, gtk.TRUE, gtk.TRUE, 5 )
			self.help_vbox.pack_start( self.help_para2, gtk.TRUE, gtk.TRUE, 5 )
			self.help_para1.show()
			self.help_para2.show()

		# Create the close button
		self.help_close = gtk.Button( "Close", gtk.STOCK_CLOSE )
		self.help_close.connect( "clicked", self.second_destroy, "Help" )
		self.help_vbox.pack_start( self.help_close )

		# Show everything
		self.help_close.show()
		self.help_vbox.show()
		self.help_window.show()

	# Moves forward a page
	def move_forward( self, widget, data="Basic Settings" ):
		if data == "Basic Settings":
			self.main_notebook.set_current_page( 1 )
		elif data == "Kernel Modules":
			self.main_notebook.set_current_page( 2 )
		elif data == "Backups":
			self.main_notebook.set_current_page( 3 )
		elif data == "Services":
			self.main_notebook.set_current_page( 4 )
		elif data == "Finish":
			self.main_notebook.set_current_page( 5 )

	# Called when 'Open' is clicked
	def open_file( self, widget, data ):

		# Make the fileselection
		if data == "timezone":
			self.filesel1 = gtk.FileSelection( "Timezones" )
			self.filesel1.set_filename( "/usr/share/zoneinfo/" )
			self.filesel1.ok_button.connect( "clicked", self.ok_action, "timezone" )
		elif data == "font":
			self.filesel1 = gtk.FileSelection( "Fonts" )
			self.filesel1.set_filename( "/usr/share/kbd/consolefonts/" )
			self.filesel1.ok_button.connect( "clicked", self.ok_action, "font" )
		elif data == "keymap":
			self.filesel1 = gtk.FileSelection( "Keymaps" )
			self.filesel1.set_filename( "/usr/share/kbd/keymaps/" )
			self.filesel1.ok_button.connect( "clicked", self.ok_action, "keymap" )

		elif data == "backup":
			self.filesel1 = gtk.FileSelection( "Backup Files" )
			self.filesel1.set_filename( "/" )
			self.filesel1.ok_button.connect( "clicked", self.ok_action, "backup" )
		
		elif data == "services":
			self.filesel1 = gtk.FileSelection( "Services" )
			self.filesel1.set_filename( "/etc/rc.d/" )
			self.filesel1.ok_button.connect( "clicked", self.ok_action, "services" )

		self.filesel1.cancel_button.connect( "clicked", self.second_destroy, "filesel1" )
		self.filesel1.show()

	# Called from open_file() to put selected name in entry
	def ok_action( self, widget, data="timezone" ):
		
		# Get the filename
		filename = self.filesel1.get_filename()
		
		if data == "timezone":
			self.basic_set_tzone_entry.set_text( filename )

		elif data == "font":
			self.basic_set_font_entry.set_text( filename )
		elif data == "keymap":
			self.basic_set_kmap_entry.set_text( filename )
		elif data == "backup":
			self.backups_add_file_entry.set_text( filename )
		elif data == "services":
			self.services_add_entry.set_text( filename )

	 	# Close fileselection box
		self.second_destroy( self.filesel1, "filesel1" )

	# Called from 'Kernel Modules'... opens an 'Add Module' dialog
	def add_module( self, widget ):
		module_name = self.kernel_mod_add_mod_entry.get_text()
		self.kernel_mod_add_mod_entry.set_text( "" )
		self.MODULES = self.MODULES + [ module_name ]
		self.kernel_mod_rm_mod_combo.set_popdown_strings( self.MODULES )

	def rm_module( self, widget ):
		module_name = self.kernel_mod_rm_mod_combo.entry.get_text()
		for module in self.MODULES:
			if module == module_name:
				self.MODULES.remove( module_name )
				self.kernel_mod_rm_mod_combo.entry.set_text( "" )
				self.kernel_mod_rm_mod_combo.set_popdown_strings( self.MODULES )
	
	# Called from 'Backups' to add a file to backup
	def add_backup( self, widget ):
		backup_name = self.backups_add_file_entry.get_text()
		self.backups_add_file_entry.set_text( "" )
		self.BACKUPS = self.BACKUPS + [ backup_name ]
		self.backups_rm_file_combo.set_popdown_strings( self.BACKUPS )
	
	def rm_backup( self, widget ):
		backup_name = self.backups_rm_file_combo.entry.get_text()
		self.BACKUPS.remove( backup_name )
		self.backups_rm_file_combo.entry.set_text( "" )
		self.backups_rm_file_combo.set_popdown_strings( self.BACKUPS )

	# Determines whether backing up is enabled
	def backup_enabled( self, widget, data ):
		if data == "on":
			self.BACKUP = "yes"
			
		elif data == "off":
			self.BACKUP = "no"

	# Determines whether parallel boot is enabled
	def parallel_enabled( self, widget, data ):
		if data == "yes":
			self.PARALLEL = "yes"
		elif data == "no":
			self.PARALLEL = "no"

	# Called from 'Services' to add/remove service
	def add_service( self, widget ):
		service_name = self.services_add_entry.get_text()
		self.services_add_entry.set_text( "" )
		self.DAEMONS = self.DAEMONS + [ service_name ]
		self.services_rm_combo.set_popdown_strings( self.DAEMONS )

	def rm_service( self, widget ):
		service_name = self.services_rm_combo.entry.get_text()
		self.services_rm_combo.entry.set_text( "" )
		self.DAEMONS.remove( service_name )
		self.services_rm_combo.set_popdown_strings( self.DAEMONS )
	
	# Called to open an "OK" window dialog when you're done
	def ok_window( self ):

		# Create the window
		self.ok_window = gtk.Window( gtk.WINDOW_TOPLEVEL )
		self.ok_window.set_title( "OK" )
		self.ok_window.connect( "delete_event", self.delete_event )

		# Create everything it needs
		self.ok_window_vbox = gtk.VBox( gtk.FALSE, 10 )
		self.ok_window.add( self.ok_window_vbox )
		self.ok_window_congrats = gtk.Label( "Congratulations! gConfig-Init has successfully written the following to /etc/initconf.py. You may now hit 'OK' to quit the program." )
		self.ok_window_congrats.set_line_wrap( gtk.TRUE )
		self.ok_window_written = gtk.Label( self.write )
		self.ok_window_written.set_line_wrap( gtk.TRUE )
		self.ok_window_button = gtk.Button( "OK", gtk.STOCK_OK )
		self.ok_window_button.connect( "clicked", self.delete_event, "die!" )

		# Add stuff to the vbox
		self.ok_window_vbox.pack_start( self.ok_window_congrats, gtk.FALSE, gtk.FALSE, 10 )
		self.ok_window_vbox.pack_start( self.ok_window_written, gtk.FALSE, gtk.FALSE, 10 )
		self.ok_window_vbox.pack_end( self.ok_window_button, gtk.FALSE, gtk.FALSE, 10 )

		# show everything
		self.ok_window_congrats.show()
		self.ok_window_written.show()
		self.ok_window_button.show()
		self.ok_window_vbox.show()
		self.ok_window.show()
	
	# Writes all the information to the disc
	def write_info( self, widget ):

		# Get some vars
		self.TIMEZONE = self.basic_set_tzone_entry.get_text()
		self.FONT = self.basic_set_font_entry.get_text()
		self.KEYMAP = self.basic_set_kmap_entry.get_text()
		self.TIMEZONE = "TIMEZONE = \""+self.TIMEZONE+"\""
		self.FONT= "FONT = \""+self.FONT+"\""
		self.KEYMAP = "KEYMAP = \""+self.KEYMAP+"\""
		self.count = len( self.MODULES ) - 1
		self.counter = 0
		self.MODULES_ = "MODULES = [ "
		while self.counter <= self.count:
			self.MODULES_ = self.MODULES_ + "\""+self.MODULES[ self.counter ]+"\""
			if self.counter != self.count:
				self.MODULES_ = self.MODULES_ +", "
			self.counter = self.counter + 1
		self.MODULES_ = self.MODULES_ + " ]"
		self.BACKUP = "BACKUP = \""+self.BACKUP+"\""
		self.counter = 0
		self.count = len( self.BACKUPS ) - 1
		self.BACKUPS_ = "BACKUPS = [ "
		while self.counter <= self.count:
			self.BACKUPS_ = self.BACKUPS_ + "\""+self.BACKUPS[ self.counter ]+"\""
			if self.counter != self.count:
				self.BACKUPS_ = self.BACKUPS_ + ", "
			self.counter = self.counter + 1
		self.BACKUPS_ = self.BACKUPS_ + " ]"
		self.PARALLEL = "PARALLEL = \""+self.PARALLEL+"\""
		self.counter = 0
		self.count = len( self.DAEMONS ) - 1
		self.SERVICES_ = "DAEMONS = [ "
		while self.counter <= self.count:
			self.SERVICES_ = self.SERVICES_ + "\""+self.DAEMONS[ self.counter ]+"\""
			if self.count != self.counter:
				self.SERVICES_ = self.SERVICES_ + ", "
			self.counter = self.counter + 1
		self.SERVICES_ = self.SERVICES_ + " ]"

		# What to write
		self.write = "#\n# /etc/initconf.py - Init configuration file\n# Generated by gConfig-Init\n# Copyright 2004, Forty-two\n\n"+self.TIMEZONE+"\n"+self.KEYMAP+"\n"+self.FONT+"\n"+self.MODULES_+"\n"+self.BACKUP+"\n"+self.BACKUPS_+"\n"+self.PARALLEL+"\n"+self.SERVICES_+"\nHOSTNAME = \"\"\nINTERFACES = { \"lo\":\"lo 127.0.0.1\" }"
		
		# See if the file exists - if it does, remove it
		if path.exists( "/home/kyle/devel/pynux/forty-two/initconf.py" ): # CHANGEME
			system( "/bin/rm /home/kyle/devel/pynux/forty-two/initconf.py" ) # CHANGEME
		
		# Create the file
		self.initconf = file( "/home/kyle/devel/pynux/forty-two/initconf.py", "w" ) # CHANGEME
		self.initconf.write( self.write )
		self.initconf.close

		# Call the ok_window function
		self.ok_window()
		
	# Creates the notebook
	def notebook_create( self ):

		# Create the notebook
		self.main_notebook = gtk.Notebook()
		self.main_notebook.set_tab_pos( gtk.POS_TOP )
		self.window1.add( self.main_notebook )

		# Create widgets to be used throughout the program
		self.gconfig_image = gtk.Image()
		self.gconfig_image.set_from_file( "imgs/gconfig-init.png" )
		self.cancel_button = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.cancel_button.connect( "clicked", self.delete_event, "cancel" )
		self.forward_button = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.help_button = gtk.Button( "Help", gtk.STOCK_HELP )

		#####################
		# Stuff for 'Begin' #
		#####################

		# Create stuff for 'Begin'
		self.begin_table = gtk.Table( 3, 4, gtk.FALSE )
		self.begin_table.set_row_spacings( 10 )
		self.begin_table.set_col_spacings( 5 )
		self.begin_label = gtk.Label( "Begin" )
		self.begin_body = gtk.Label( "Welcome to gConfig-Init. This program will help you to configure your init scripts, telling your system what to do at boot. You will be prompted before any changes are made to your system. You may hit 'Cancel' any time before that to quit the program and discard all changes." )
		self.begin_body.set_line_wrap( gtk.TRUE )
		self.help_button.connect( "clicked", self.help, "Begin" )
		self.forward_button.connect( "clicked", self.move_forward, "Basic Settings" )


		# Add everything to the table
		self.begin_table.attach( self.gconfig_image, 0, 4, 0, 1 )
		self.begin_table.attach( self.begin_body, 1, 3, 1, 2 )
		self.begin_table.attach( self.cancel_button, 0, 1, 2, 3 )
		self.begin_table.attach( self.help_button, 1, 2, 2, 3 )
		self.begin_table.attach( self.forward_button, 3, 4, 2, 3 )

		# Add the table to the notebook
		self.main_notebook.insert_page( self.begin_table, self.begin_label, 0 )

		# Show everything
		self.begin_label.show()
		self.gconfig_image.show()
		self.begin_body.show()
		self.cancel_button.show()
		self.help_button.show()
		self.forward_button.show()
		self.begin_table.show()
		self.main_notebook.show()
		
		#########################
		# End stuff for 'Begin' #
		#########################

		##############################
		# Stuff for 'Basic Settings' #
		##############################

		# Create stuff for 'Basic Settings'
		self.basic_set_table = gtk.Table( 5, 4, gtk.FALSE )
		self.basic_set_table.set_row_spacings( 10 )
		self.basic_set_table.set_col_spacings( 5 )
		self.basic_set_label = gtk.Label( "Basic Settings" )
		self.basic_set_timezone = gtk.Label( "Timezone:" )
		self.basic_set_font = gtk.Label( "Font:" )
		self.basic_set_keymap = gtk.Label( "Keymap:" )
		self.basic_set_tzone_entry = gtk.Entry( 0 )
		self.basic_set_font_entry = gtk.Entry( 0 )
		self.basic_set_kmap_entry = gtk.Entry( 0 )
		self.basic_set_tzone_open = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.basic_set_tzone_open.connect( "clicked", self.open_file, "timezone" )
		self.basic_set_font_open = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.basic_set_font_open.connect( "clicked", self.open_file, "font" )
		self.basic_set_kmap_open = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.basic_set_kmap_open.connect( "clicked", self.open_file, "keymap" )
		self.basic_set_help = gtk.Button( "Help", gtk.STOCK_HELP )
		self.basic_set_help.connect( "clicked", self.help, "Basic Settings" )
		self.basic_set_cancel = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.basic_set_cancel.connect( "clicked", self.delete_event, "Destroy" )
		self.basic_set_forward = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.basic_set_forward.connect( "clicked", self.move_forward, "Kernel Modules" )
		self.basic_set_image = gtk.Image()
		self.basic_set_image.set_from_file( "imgs/gconfig-init.png" )

		# Add everything to the table
		self.basic_set_table.attach( self.basic_set_image, 0, 5, 0, 1 )
		self.basic_set_table.attach( self.basic_set_timezone, 0, 1, 1, 2 )
		self.basic_set_table.attach( self.basic_set_tzone_entry, 1, 3, 1, 2 )
		self.basic_set_table.attach( self.basic_set_tzone_open, 3, 4, 1, 2 )
		self.basic_set_table.attach( self.basic_set_font, 0, 1, 2, 3 )
		self.basic_set_table.attach( self.basic_set_font_entry, 1, 3, 2, 3 )
		self.basic_set_table.attach( self.basic_set_font_open, 3, 4, 2, 3 )
		self.basic_set_table.attach( self.basic_set_keymap, 0, 1, 3, 4 )
		self.basic_set_table.attach( self.basic_set_kmap_entry, 1, 3, 3, 4 )
		self.basic_set_table.attach( self.basic_set_kmap_open, 3, 4, 3, 4 )
		self.basic_set_table.attach( self.basic_set_cancel, 0, 1, 4, 5 )
		self.basic_set_table.attach( self.basic_set_help, 1, 3, 4, 5 )
		self.basic_set_table.attach( self.basic_set_forward, 3, 4, 4, 5 )

		# Add table to notebook
		self.main_notebook.insert_page( self.basic_set_table, self.basic_set_label, 1 )
		
		# Show everything
		self.basic_set_label.show()
		self.basic_set_image.show()
		self.basic_set_timezone.show()
		self.basic_set_font.show()
		self.basic_set_keymap.show()
		self.basic_set_tzone_entry.show()
		self.basic_set_font_entry.show()
		self.basic_set_kmap_entry.show()
		self.basic_set_tzone_open.show()
		self.basic_set_font_open.show()
		self.basic_set_kmap_open.show()
		self.basic_set_help.show()
		self.basic_set_cancel.show()
		self.basic_set_forward.show()
		self.basic_set_table.show()

		##################################
		# End stuff for 'Basic Settings' #
		##################################

		####################################
		# Start stuff for 'Kernel Modules' #
		####################################
		
		# Create everything it'll need
		self.kernel_mod_table = gtk.Table( 4, 3, gtk.FALSE )
		self.kernel_mod_table.set_row_spacings( 5 )
		self.kernel_mod_table.set_col_spacings( 10 )
		self.kernel_mod_label = gtk.Label( "Kernel Modules" )
		self.kernel_mod_image = gtk.Image()
		self.kernel_mod_image.set_from_file( "imgs/gconfig-init.png" )
		self.kernel_mod_add_mod_label = gtk.Label( "Add module:" )
		self.kernel_mod_add_mod_entry = gtk.Entry( 0 )
		self.kernel_mod_add_mod_button = gtk.Button( "Add", gtk.STOCK_ADD )
		self.kernel_mod_add_mod_button.connect( "clicked", self.add_module )
		self.kernel_mod_rm_mod_label = gtk.Label( "Remove module:" )
		self.kernel_mod_rm_mod_combo = gtk.Combo()
		self.kernel_mod_rm_mod_combo.set_popdown_strings( self.MODULES )
		self.kernel_mod_rm_mod_combo.set_use_arrows( gtk.TRUE )
		self.kernel_mod_rm_mod_button = gtk.Button( "Remove", gtk.STOCK_REMOVE )
		self.kernel_mod_rm_mod_button.connect( "clicked", self.rm_module )
		self.kernel_mod_cancel = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.kernel_mod_cancel.connect( "clicked", self.delete_event, "Kill it!" )
		self.kernel_mod_help = gtk.Button( "Help", gtk.STOCK_HELP )
		self.kernel_mod_help.connect( "clicked", self.help, "Kernel Modules" )
		self.kernel_mod_forward = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.kernel_mod_forward.connect( "clicked", self.move_forward, "Backups" )

		# Add everything to the table
		self.kernel_mod_table.attach( self.kernel_mod_image, 0, 3, 0, 1 )
		self.kernel_mod_table.attach( self.kernel_mod_add_mod_label, 0, 1, 1, 2 )
		self.kernel_mod_table.attach( self.kernel_mod_add_mod_entry, 1, 2, 1, 2 )
		self.kernel_mod_table.attach( self.kernel_mod_add_mod_button, 2, 3, 1, 2 )
		self.kernel_mod_table.attach( self.kernel_mod_rm_mod_label, 0, 1, 2, 3 )
		self.kernel_mod_table.attach( self.kernel_mod_rm_mod_combo, 1, 2, 2, 3 )
		self.kernel_mod_table.attach( self.kernel_mod_rm_mod_button, 2, 3, 2, 3 )
		self.kernel_mod_table.attach( self.kernel_mod_cancel, 0, 1, 3, 4 )
		self.kernel_mod_table.attach( self.kernel_mod_help, 1, 2, 3, 4 )
		self.kernel_mod_table.attach( self.kernel_mod_forward, 2, 3, 3, 4 )

		# Attach table to notebook
		self.main_notebook.insert_page( self.kernel_mod_table, self.kernel_mod_label, 2 )
		
		# Show everything
		self.kernel_mod_label.show()
		self.kernel_mod_image.show()
		self.kernel_mod_add_mod_label.show()
		self.kernel_mod_add_mod_entry.show()
		self.kernel_mod_add_mod_button.show()
		self.kernel_mod_rm_mod_label.show()
		self.kernel_mod_rm_mod_combo.show()
		self.kernel_mod_rm_mod_button.show()
		self.kernel_mod_cancel.show()
		self.kernel_mod_help.show()
		self.kernel_mod_forward.show()
		self.kernel_mod_table.show()

		##############################
		# End 'Kernel Modules' stuff #
		##############################
		
		#########################
		# Begin 'Backups' stuff #
		#########################
		
		# Create everything
		self.backups_table = gtk.Table( 5, 3, gtk.FALSE )
		self.backups_table.set_row_spacings( 5 )
		self.backups_table.set_col_spacings( 10 )
		self.backups_image = gtk.Image()
		self.backups_image.set_from_file( "imgs/gconfig-init.png" )
		self.backups_label = gtk.Label( "Backups" )
		self.backups_question_label = gtk.Label( "Enable backing-up of select files on boot?" )
		self.backups_question_label.set_line_wrap( gtk.TRUE )
		self.backups_hbox = gtk.HBox( gtk.FALSE, 5 )
		self.backups_radio_yes = gtk.RadioButton( None, "Yes" )
		self.backups_radio_yes.set_active( gtk.TRUE )
		self.backups_radio_yes.connect( "toggled", self.backup_enabled, "on" )
		self.backups_radio_no = gtk.RadioButton ( self.backups_radio_yes, "No" )
		self.backups_radio_no.connect( "toggled", self.backup_enabled, "off" )
		self.backups_add_file_label = gtk.Label( "Add file:" )
		self.backups_add_file_entry = gtk.Entry( 0 )
		self.backups_add_hbox = gtk.HBox( gtk.FALSE, 5 )
		self.backups_add_file_obutton = gtk.Button( "Open", gtk.STOCK_OPEN )
		self.backups_add_file_obutton.connect( "clicked", self.open_file, "backup" )
		self.backups_add_file_abutton = gtk.Button( "Add", gtk.STOCK_ADD )
		self.backups_add_file_abutton.connect( "clicked", self.add_backup )
		self.backups_rm_file_label = gtk.Label( "Remove file:" )
		self.backups_rm_file_combo = gtk.Combo()
		self.backups_rm_file_combo.set_popdown_strings( self.BACKUPS )
		self.backups_rm_file_rbutton = gtk.Button( "Remove", gtk.STOCK_REMOVE )
		self.backups_rm_file_rbutton.connect( "clicked", self.rm_backup )
		self.backups_cancel = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.backups_cancel.connect( "clicked", self.delete_event, "Kill it now!" )
		self.backups_help = gtk.Button( "Help", gtk.STOCK_HELP )
		self.backups_help.connect( "clicked", self.help, "Backups" )
		self.backups_forward = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.backups_forward.connect( "clicked", self.move_forward, "Services" )
		
		# Add things to their HBoxes
		self.backups_hbox.pack_start( self.backups_radio_yes, gtk.FALSE, gtk.FALSE, 5 )
		self.backups_hbox.pack_start( self.backups_radio_no, gtk.FALSE, gtk.FALSE, 5 )
		self.backups_add_hbox.pack_start( self.backups_add_file_obutton, gtk.FALSE, gtk.FALSE, 5 )
		self.backups_add_hbox.pack_start( self.backups_add_file_abutton, gtk.FALSE, gtk.FALSE, 5 )

		# Add things to the table
		self.backups_table.attach( self.backups_image, 0, 3, 0, 1 )
		self.backups_table.attach( self.backups_question_label, 1, 2, 1, 2 )
		self.backups_table.attach( self.backups_hbox, 2, 3, 1, 2 )
		self.backups_table.attach( self.backups_add_file_label, 0, 1, 2, 3 )
		self.backups_table.attach( self.backups_add_file_entry, 1, 2, 2, 3 )
		self.backups_table.attach( self.backups_add_hbox, 2, 3, 2, 3 )
		self.backups_table.attach( self.backups_rm_file_label, 0, 1, 3, 4 )
		self.backups_table.attach( self.backups_rm_file_combo, 1, 2, 3, 4 )
		self.backups_table.attach( self.backups_rm_file_rbutton, 2, 3, 3, 4 )
		self.backups_table.attach( self.backups_cancel, 0, 1, 4, 5 )
		self.backups_table.attach( self.backups_help, 1, 2, 4, 5 )
		self.backups_table.attach( self.backups_forward, 2, 3, 4, 5 )
		
		# Add it to the notebook
		self.main_notebook.insert_page( self.backups_table, self.backups_label, 3 )
		
		# Show everything
		self.backups_label.show()
		self.backups_image.show()
		self.backups_question_label.show()
		self.backups_radio_yes.show()
		self.backups_radio_no.show()
		self.backups_hbox.show()
		self.backups_cancel.show()
		self.backups_help.show()
		self.backups_forward.show()
		self.backups_add_file_label.show()
		self.backups_add_file_entry.show()
		self.backups_add_file_obutton.show()
		self.backups_add_file_abutton.show()
		self.backups_add_hbox.show()
		self.backups_rm_file_label.show()
		self.backups_rm_file_combo.show()
		self.backups_rm_file_rbutton.show()
		self.backups_table.show()

		###########################
		# End stuff for 'Backups' #
		###########################

		##############################
		# Begin stuff for 'Services' #
		##############################
		
		# Create everything for 'Services' #
		self.services_table = gtk.Table( 5, 3, gtk.FALSE )
		self.services_table.set_row_spacings( 10 )
		self.services_table.set_col_spacings( 5 )
		self.services_label = gtk.Label( "Services" )
		self.services_image = gtk.Image()
		self.services_image.set_from_file( "imgs/gconfig-init.png" )
		self.services_parallel_label = gtk.Label( "Enable parallel boot (unstable)?" )
		self.services_parallel_hbox = gtk.HBox( gtk.FALSE, 5 )
		self.services_parallel_yes = gtk.RadioButton( None, "Yes" )
		self.services_parallel_yes.connect( "toggled", self.parallel_enabled, "yes" )
		self.services_parallel_no = gtk.RadioButton( self.services_parallel_yes, "No" )
		self.services_parallel_no.set_active( gtk.TRUE )
		self.services_parallel_no.connect( "toggled", self.parallel_enabled, "no" )
		self.services_add_label = gtk.Label( "Add service:" )
		self.services_add_entry = gtk.Entry( 0 )
		self.services_add_abutton = gtk.Button( "Add", gtk.STOCK_ADD )
		self.services_add_abutton.connect( "clicked", self.add_service )
		self.services_rm_label = gtk.Label( "Remove service:" )
		self.services_rm_combo = gtk.Combo()
		self.services_rm_combo.set_popdown_strings( self.DAEMONS )
		self.services_rm_button = gtk.Button( "Remove", gtk.STOCK_REMOVE )
		self.services_rm_button.connect( "clicked", self.rm_service )
		self.services_cancel = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.services_cancel.connect( "clicked", self.delete_event, "DIE!" )
		self.services_help = gtk.Button( "Help", gtk.STOCK_HELP )
		self.services_help.connect( "clicked", self.help, "Services" )
		self.services_forward = gtk.Button( "Forward", gtk.STOCK_GO_FORWARD )
		self.services_forward.connect( "clicked", self.move_forward, "Finish" )

		# Add things to their appropriate HBoxes
		self.services_parallel_hbox.pack_start( self.services_parallel_yes, gtk.FALSE, gtk.FALSE, 5 )
		self.services_parallel_hbox.pack_start( self.services_parallel_no, gtk.FALSE, gtk.FALSE, 5 )
		
		# Add everything to the table
		self.services_table.attach( self.services_image, 0, 3, 0, 1 )
		self.services_table.attach( self.services_parallel_label, 1, 2, 1, 2 )
		self.services_table.attach( self.services_parallel_hbox, 2, 3, 1, 2 )
		self.services_table.attach( self.services_add_label, 0, 1, 2, 3 )
		self.services_table.attach( self.services_add_entry, 1, 2, 2, 3 )
		self.services_table.attach( self.services_add_abutton, 2, 3, 2, 3 )
		self.services_table.attach( self.services_rm_label, 0, 1, 3, 4 )
		self.services_table.attach( self.services_rm_combo, 1, 2, 3, 4 )
		self.services_table.attach( self.services_rm_button, 2, 3, 3, 4 )
		self.services_table.attach( self.services_cancel, 0, 1, 4, 5 )
		self.services_table.attach( self.services_help, 1, 2, 4, 5 )
		self.services_table.attach( self.services_forward, 2, 3, 4, 5 )

		# Add the table to the notebook
		self.main_notebook.insert_page( self.services_table, self.services_label, 4 )
		
		# Show everything
		self.services_label.show()
		self.services_image.show()
		self.services_parallel_label.show()
		self.services_parallel_no.show()
		self.services_parallel_yes.show()
		self.services_parallel_hbox.show()
		self.services_add_label.show()
		self.services_add_entry.show()
		self.services_add_abutton.show()
		self.services_rm_label.show()
		self.services_rm_combo.show()
		self.services_rm_button.show()
		self.services_cancel.show()
		self.services_help.show()
		self.services_forward.show()
		self.services_table.show()

		############################
		# End stuff for 'Services' #
		############################
		
		############################
		# Begin stuff for 'Finish' #
		############################
		
		# Create stuff for 'Finish'
		self.finish_vbox = gtk.VBox( gtk.FALSE, 10 )
		self.finish_label = gtk.Label( "Finish" )
		self.finish_image = gtk.Image()
		self.finish_image.set_from_file( "imgs/gconfig-init.png" )
		self.finish_body = gtk.Label( "You may now hit 'OK' to save all changes to your disk. To cancel this, press 'Cancel.'" )
		self.finish_body.set_line_wrap( gtk.TRUE )
		self.finish_hbox = gtk.HBox( gtk.FALSE, 5 )
		self.finish_cancel = gtk.Button( "Cancel", gtk.STOCK_CANCEL )
		self.finish_cancel.connect( "clicked", self.delete_event, "Hey..." )
		self.finish_ok = gtk.Button( "OK", gtk.STOCK_OK )
		self.finish_ok.connect( "clicked", self.write_info )
		
		# Add stuff to the hbox
		self.finish_hbox.pack_start( self.finish_cancel, gtk.FALSE, gtk.FALSE, 5 )
		self.finish_hbox.pack_end( self.finish_ok, gtk.FALSE, gtk.FALSE, 5 )

		# Add everything to the vbox
		self.finish_vbox.pack_start( self.finish_image, gtk.FALSE, gtk.FALSE, 10 )
		self.finish_vbox.pack_start( self.finish_body, gtk.FALSE, gtk.FALSE, 10 )
		self.finish_vbox.pack_start( self.finish_hbox, gtk.FALSE, gtk.FALSE, 10 )

		# Add it to the notebook
		self.main_notebook.insert_page( self.finish_vbox, self.finish_label, 5 )

		# Show everything
		self.finish_label.show()
		self.finish_image.show()
		self.finish_body.show()
		self.finish_cancel.show()
		self.finish_ok.show()
		self.finish_hbox.show()
		self.finish_vbox.show()

	def __init__( self ):

		# Start the window
		self.window1 = gtk.Window( gtk.WINDOW_TOPLEVEL )
		self.window1.set_title( "gConfig-Init" )
		self.window1.connect( "delete_event", self.delete_event )
		self.window1.set_border_width( 5 )

		# Create some variable
		self.MODULES = []
		self.BACKUPS = []
		self.DAEMONS = []
		self.BACKUP = "yes"
		self.PARALLEL = "no"

		# Call notebook_create()
		self.notebook_create()
		
		self.window1.show()
		

		

def main():
	gtk.main()
	return 0

if __name__ == "__main__":
	MainWindow()
	main()
